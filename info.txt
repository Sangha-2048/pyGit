# Some reference info

A repository, in git, is made of two things: a “work tree”, where the files meant to be in version control live, 
and a “git directory”, where Git stores its own data. In most cases, the worktree is a regular directory 
and the git directory is a child directory of the worktree, called .git.


To create a new Repository object, we only need to make a few checks:-
1. We must verify that the directory exists, and contains a subdirectory called .git.
2. We read its configuration in .git/config (it’s just an INI file) and control that core.repositoryformatversion is 0.


The constructor of GitRepository class takes an optional force which disables all check. 
That’s because the repo_create() function which we’ll create later uses a Repository object to create the repo. 
So we need a way to create repository even from (still) invalid filesystem locations.


There's two meaning of wildcards in paths for file collections. 
* is a simple, non-recursive wildcard representing zero or more characters which you can use for paths and file names. 
** is a recursive wildcard which can only be used with paths, not file names.


To create a new repository, we start with a directory (which we create if doesn’t already exist, 
or check for emptiness otherwise) and create the following paths:
.git is the git directory itself, which contains:
.git/objects/ : the object store, which we’ll introduce in the next section.
.git/refs/ the reference store, which we’ll discuss . It contains two subdirectories, heads and tags.
.git/HEAD, a reference to the current HEAD (more on that later!)
.git/config, the repository’s configuration file.
.git/description, the repository’s description file.


The configuration file is very simple, it’s a INI-like file with a single section ([core]) and three fields:
1. repositoryformatversion = 0: the version of the gitdir format. 0 means the initial format, 1 the same with extensions. 
        If > 1, git will panic; our project will only accept 0.
2. filemode = false: disable tracking of file mode changes in the work tree.
3. bare = false: indicates that this repository has a worktree.